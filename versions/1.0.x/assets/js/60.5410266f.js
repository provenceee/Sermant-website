(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{506:function(t,a,r){"use strict";r.r(a);var e=r(26),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("h2",{attrs:{id:"sermant是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sermant是什么"}},[t._v("#")]),t._v(" Sermant是什么")]),t._v(" "),a("p",[a("strong",[t._v("Sermant")]),t._v("是基于Java Agent无代理的服务网格技术。其利用Java Agent为宿主应用程序提供增强的服务治理功能，以解决大规模微服务场景中的服务治理问题。")]),t._v(" "),a("h2",{attrs:{id:"架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[t._v("#")]),t._v(" 架构")]),t._v(" "),a("p",[t._v("Sermant的愿景还包括构建插件开发生态系统，以帮助开发人员更容易地开发服务治理功能，同时不干扰业务代码。Sermant架构描述如下。")]),t._v(" "),a("MyImage",{attrs:{src:"/docs-img/sermant-product-arch.png"}}),t._v(" "),a("p",[t._v("根据上图，Sermant中Java Agent包含两层功能。")]),t._v(" "),a("ul",[a("li",[t._v("框架核心层。核心层提供Sermant的基本框架功能，以简化插件开发。该层的功能包括心跳、数据传输、动态配置等。")]),t._v(" "),a("li",[t._v("插件服务层。插件为宿主应用提供实际的治理服务。开发者可以直接利用框架核心服务开发简单插件，也可以开发插件自身的复杂服务治理功能来开发复杂插件。")])]),t._v(" "),a("p",[t._v("Sermant中的Java Agent广泛采用类隔离技术，以消除框架代码、插件代码和宿主应用程序代码之间的类加载冲突。")]),t._v(" "),a("p",[t._v("使用Sermant的微服务架构具有以下三个组件，如下图所示。")]),t._v(" "),a("MyImage",{attrs:{src:"/docs-img/sermant-rt-arch.png"}}),t._v(" "),a("ul",[a("li",[t._v("Sermant Java Agent：动态地为宿主应用程序提供服务治理能力。")]),t._v(" "),a("li",[t._v("Sermant Backend：为Java Agent的上传数据提供连接和预处理服务。")]),t._v(" "),a("li",[t._v("Dynamic configuration center：通过动态更新监听的Java Agent的配置来提供指令。Sermant项目不直接提供动态配置中心。这些项目目前支持servicecomb-kie等。")])])],1)}),[],!1,null,null,null);a.default=n.exports}}]);